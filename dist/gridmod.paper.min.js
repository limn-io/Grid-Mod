/*!
 * Copyright (c) 2014 Neil Vallon (http://limn.io)
 * Licensed under MIT (http://opensource.org/licenses/MIT)
 */
paper.Point.inject({limJSON:function(t){var t=t?t:new paper.Point,i=this.add(t);return{x:i.x,y:i.y}},rotmod:function(t){return this.modulo(t).add(t).modulo(t)}}),paper.Segment.inject({limJSON:function(t){var t=t?t:new paper.Point,i={point:this.point.limJSON(t)};return this.handleIn.isZero()||(i.handleIn=[this.handleIn.x,this.handleIn.y]),this.handleOut.isZero()||(i.handleOut=[this.handleOut.x,this.handleOut.y]),i},importWithOffset:function(t,i){return new paper.Segment({point:i.add(new paper.Point(t.point)),handleIn:t.handleIn,handleOut:t.handleOut})}}),paper.Path.inject({limJSON:function(){var t=this.layer.origin?this.layer.origin:new paper.Point;return"undefined"!=typeof this.parent.parent&&(t=t.subtract(this.parent.offset.multiply(this.layer.boardSize))),{segments:this.segments.map(function(i){return i.limJSON(t)}),strokeWidth:this.strokeWidth,strokeColor:this.strokeColor.components,strokeCap:this.strokeCap}},importWithOffset:function(t,i){return this.segments=t.segments.map(function(t){return(new paper.Segment).importWithOffset(t,i)}),this.strokeWidth=t.strokeWidth,this.strokeColor=t.strokeColor,this.strokeCap=t.strokeCap,this}}),paper.Group.inject({board:new paper.Point,getOffset:function(){return this.board.subtract(this.layer.currentBoard)},addChildWithOffset:function(t){return t.position=this.offset.multiply(this.layer.boardSize).subtract(this.layer.origin).add(t.position),this.addChild(t),this},initBoard:function(t){var i=new paper.Point(t.boardID),r=i.subtract(this.layer.currentBoard).multiply(this.layer.boardSize).subtract(this.layer.origin);return this.board=i,this.children=t.children.map(function(t){return(new paper.Path).importWithOffset(t,r)}),this}});var LimnLayer=paper.Layer.extend({origin:new paper.Point,currentBoard:new paper.Point,boardSize:new paper.Point(2e3),move:function(t){this.translate(t),this.origin=this.origin.subtract(t),this.currentBoard=this.currentBoard.add(this.origin.divide(this.boardSize).floor()),this.origin=this.origin.rotmod(this.boardSize)},board:function(t){for(var i=0;i<this.children.length;i++)if(void 0!==this.children[i].board&&this.children[i].board.equals(t))return this.children[i];return null}});
